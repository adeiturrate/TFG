#! /bin/bash 
#SBATCH --job-name="msmc"
#SBATCH --partition=all
#SBATCH --cpus-per-task=5
#SBATCH --mem=90G
#SBATCH --output=/scratch/125-emmer/Ander/output/msmc%j.out
#SBATCH --error=/scratch/125-emmer/Ander/error/msmc%j.err

#A.IOB 10.2022 
#PREPARE INPUT FILES AND RUN MSMC ON EXOME CAPTURE DATASET
#First prepare input files with msmsc-tools, than make pseudodiploids, finally run msmc on the pseudodiploid dataset. 

#FIXME : this is based on my paths and file names. Change them according to you data.

#load required modules (for vcftools, installed in home node, is not required)
module load conda
conda activate /projects/125-emmer/ander_envs/python3.11 
module load samtools/1.9

#0.PRELIMINARY  
#0.1 assign variables to paths to required files/scripts/executables
bamCaller="/home/adeiturrate/msmc-tools/bamCaller.py"
genMultihet="/home/adeiturate/msmc-tools/generate_multihetsep.py"
msmc2="/home/adeiturate/msmc2/build/release/msmc2"
combcross="/home/adeiturate/msmc-tools/combineCrossCoal.py"
REF="/projects/125-emmer/Wang2022_emmer_fastq/Reference_Genome/Triticum_turgidum.Svevo.v1.dna_rm.genomic.msmc.fa"
#mmaskp="/projects/125-emmer/Reference_genomes/Triticum_durum/Svevo_mappability_masks"

#0.2 assign variables to paths and create output folders
#msp="/scratch/125-emmer/MSMC/msmc_exome_data"
sp="/scratch/125-emmer/Ander/MSMC/samplesvcf"
maskp="/scratch/125-emmer/Ander/MSMC/qmask"
bamp="/scratch/125-emmer/Ander/Alignments"


pp="/scratch/125-emmer/Ander/MSMC/pseudoqmask"
#pv="/scratch/125-emmer/MSMC/msmc_exome_data/pseudod_vcfs"
#mkdir $pp
#mkdir $pv

#SECTION A: PREPARE MASKS AND PSEUDODIPLOID, SINGLE SAMPLE VCFS.
#I. run bamCaller to obtain vcf and qmask files for each chromsome, for each sample (check Github msmc2 tutorial and msmc-tools).

cat /scratch/125-emmer/Ander/MSMC/wang_MSMC_names.csv | while read OLD NEW #conversion table required 
do
	echo "starting with bam $OLD, renamed as $NEW"
	echo "making msmsc input files"
	for CHR in {1..14}
	do
	
		mean_cov=$(samtools depth -r $CHR  ${bamp}/${OLD}.sorted.merged.pe-memDurum.nodupl.RG.bam | awk '{sum += $3} END {print sum / NR}')
		bcftools mpileup -q 20 -Q 20 -C 50 -r $CHR -f $REF ${bamp}/${OLD}.sorted.merged.pe-memDurum.nodupl.RG.bam | bcftools call -c -V indels | $bamCaller ${mean_cov} ${maskp}/${NEW}.${CHR}.mask.bed.gz | bgzip > ${sp}/${NEW}.${CHR}.vcf.gz
		tabix -C ${sp}/${NEW}.${CHR}.vcf.gz
		echo "done making msmc vcf and qmask for $NEW chr $CHR"
	done
done

#at this point, for each sample, for each chromsome, there is a vcf and a mask file. Delete the vcf, use the all samples vcf already created using GATK.

#use table that contains 3 columns: sample1 sample2 pseudodiploid
#II. intersect bed masks from sample1 and sample2, select sample1 and sample2 in all-samples vcf file

cat /scratch/125-emmer/Ander/MSMC/wang_MSMC_pseudodiploids.csv | while read S1 S2 PD #FIXME make a new list with the desired combinations, this is just example
do
	for CHR in {1..14}
        do
		bedtools intersect -sorted -a $maskp/${S1}.${CHR}.mask.bed.gz -b $maskp/${S2}.${CHR}.mask.bed.gz > $pp/${PD}.${CHR}.qualitymask.txt	
	done
	vcftools --gzvcf /scratch/125-emmer/Ander/artificialCHR/all_emmer_wgs_NATChr.biallSNPs.hardfiltPASS.NoSin.NOhetpositions.NoOutgroup.infocorrect.90.vcf.gz --keep $S1 --keep $S2 --recode --recode-INFO-all --stdout | bgzip > $sp/${PD}.samples.NOhet.vcf.gz #select 2 sample for each pseudodiploid
	tabix -C $sp/${PD}.samples.NOhet.vcf.gz
done

#III. haploidization + pseudodiploidization
#notice that even if after we'll need to split the vcf by chromosome, I perform the sample->pseudodiploid conversion on genome-wide vcf to avoid having too many internediate files.	
#copy the header of the input vcf and in the last row keep columns 1-9, and replace the 10th with "SAMPLE"

for ID inWSL01 WSL02 WSL03 WSL04 WSL05 WSL06 WSL07 #FIXME use the correct ids 
do
        sed "s/SAMPLE/${PD}/g" $sp/vcf.header > $pv/${PD}.pseudod.vcf #set pseudod name in vcf header 
        zcat $sp/${PD}.samples.NOhet.vcf.gz | sed -e '1,/#CHROM/ d' | awk -v OFS='\t' '{if(substr($10,1,3) == "0/0"){$10="0";print} else {$10="1";print}}' | awk -v OFS='\t' '{if(substr($11,1,3) == "0/0"){$11="0";print} else {$11="1";print}}' | awk -v OFS='\t' '{$9 ="GT"; $12=$10"|"$11;print}' | cut -f1-9,12 | awk '$10 != "0|0"' >> $pv/${PD}.pseudod.vcf #print one allele for both samples and finally merge them with "|" in new col, print all - samples columns (only new pseudod col), remove invariant sites
        bgzip $pv/${PD}.pseudod.vcf
        tabix -C $pv/${PD}.pseudod.vcf.gz
        for CHR in {1..14}
        do
                vcftools --gzvcf $pv/${PD}.pseudod.vcf.gz --chr ${CHR} --recode --recode-INFO-all --stdout | bgzip > $pv/${PD}.pseudod.${CHR}.vcf.gz
                tabix -C $pv/${PD}.pseudod.${CHR}.vcf.gz
        done
done

#Now, I have all I need to run msmc on this dataset. 
#the next step can be performed in the same loop as the last one, I separated them for clarity (separation of different steps)


##SECTION B : MSMC WORKFLOW

##1. PER SAMPLE (==PSMC) RUN
cd $msp
for ID in WSL01 WSL02 WSL03 WSL04 WSL05 WSL06 WSL07
do
	for CHR in {1..14}
	do
		$genMultihet --chr $CHR --mask $pp/${ID}.chr${CHR}.qualitymask.txt --negative_mask $mmaskp/negative_map_mask_Svevo1_chr${CHR}.bed $pv/${ID}.pseudod.${CHR}.vcf.gz > ${ID}.chr${CHR}.exome.multihetsep.txt
	done
		$msmc2 -t 5 -o psmc_${ID} ${ID}.chr1.multihetsep.txt ${ID}.chr2.multihetsep.txt ${ID}.chr3.multihetsep.txt ${ID}.chr4.multihetsep.txt ${ID}.chr5.multihetsep.txt ${ID}.chr6.multihetsep.txt ${ID}.chr7.multihetsep.txt ${ID}.chr8.multihetsep.txt ${ID}.chr9.multihetsep.txt ${ID}.chr10.multihetsep.txt ${ID}.chr11.multihetsep.txt ${ID}.chr12.multihetsep.txt ${ID}.chr13.multihetsep.txt ${ID}.chr14.multihetsep.txt
done

#2. WITHIN POPULATION
for CHR in {1..14}
do
	$genMultihet --chr $CHR --mask $pp/WSL01.${CHR}.qualitymask.txt --mask $pp/WSL02.${CHR}.qualitymask.txt --mask $pp/WSL03.${CHR}.qualitymask.txt --mask $pp/WSL04.${CHR}.qualitymask.txt --mask $pp/WSL05.${CHR}.qualitymask.txt --mask $pp/WSL06.${CHR}.qualitymask.txt --mask $pp/WSL07.${CHR}.qualitymask.txt --negative_mask $mmaskp/negative_map_mask_Svevo1_chr${CHR}.bed $pv/WSL01.pseudod.${CHR}.vcf.gz $pv/WSL02.pseudod.${CHR}.vcf.gz $pv/WSL03.pseudod.${CHR}.vcf.gz $pv/WSL04.pseudod.${CHR}.vcf.gz $pv/WSL05.pseudod.${CHR}.vcf.gz $pv/WSL06.pseudod.${CHR}.vcf.gz $pv/WSL07.pseudod.${CHR}.vcf.gz > ALL.chr${CHR}.multihetsep.txt
done

#2. RUN MSMC WITHIN POPS 
$msmc2 -t 12 -o msmc_ALL ALL.chr1.multihetsep.txt ALL.chr2.multihetsep.txt ALL.chr3.multihetsep.txt ALL.chr4.multihetsep.txt ALL.chr5.multihetsep.txt ALL.chr6.multihetsep.txt ALL.chr7.multihetsep.txt ALL.chr8.multihetsep.txt ALL.chr9.multihetsep.txt ALL.chr10.multihetsep.txt ALL.chr11.multihetsep.txt ALL.chr12.multihetsep.txt ALL.chr13.multihetsep.txt ALL.chr14.multihetsep.txt
 

conda deactivate
module unload conda
module unload samtools/1.9
